"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const discord_akairo_1 = require("discord-akairo");
const discord_js_1 = require("discord.js");
class ban extends discord_akairo_1.Command {
    constructor() {
        super("ban", {
            aliases: ["b"],
            category: "Admin",
            description: {
                content: "Bans a user",
                usage: "ban <user>",
                examples: [
                    "ban @zeekyblast#2158"
                ]
            },
            ratelimit: 5,
            userPermissions: ["ADMINISTRATOR", "BAN_MEMBERS", "MANAGE_GUILD"],
            args: [
                {
                    id: "member",
                    type: "member",
                    prompt: {
                        start: (msg) => `${msg.author}, please provide a member to look at...`,
                        retry: (msg) => `${msg.author}, please provide a valid member to look at...`
                    }
                },
                {
                    id: "reason",
                    type: "string",
                    match: "rest",
                    default: "No reason provided"
                },
                {
                    id: "size",
                    type: (_, str) => {
                        if (str && !isNaN(Number(str)) && [16, 32, 64, 128, 256, 512, 1024, 2048].includes(Number(str)))
                            return Number(str);
                        return null;
                    },
                    match: "option",
                    flag: ["-size="],
                    default: 2048
                }
            ]
        });
    }
    exec(message, { member, reason, size }) {
        const channel = message.member.guild.channels.cache.find(channel => channel.name === "logs");
        if (!message.guild.member(member).bannable)
            return message.channel.send(`${member.user.tag} is not bannable`);
        let nouser = new discord_js_1.MessageEmbed()
            .setColor("RED")
            .setDescription(`${message.author} please mention a user`);
        if (!member)
            return message.channel.send(nouser);
        let send = new discord_js_1.MessageEmbed()
            .setColor("Red")
            .setTitle("Moderation: Ban")
            .addField("Type:", `Perm Ban`)
            .addField("Date:", message.createdAt.toLocaleString())
            .addField("Reason:", `${reason}`);
        let noperms = new discord_js_1.MessageEmbed()
            .setColor("RED")
            .setDescription(`${message.author.tag} you do not have the right perms`);
        if (!message.member.hasPermission("BAN_MEMBERS"))
            return message.channel.send(noperms);
        let confirm = new discord_js_1.MessageEmbed()
            .setColor('YELLOW')
            .setTitle(`Confirm Report`)
            .setDescription(`${message.author} are you shure you want to ban ${member} for ${reason}`);
        let thankyou = new discord_js_1.MessageEmbed()
            .setColor(`GREEN`)
            .setTitle("User Banned")
            .addField("User", member.user.username)
            .addField("Reason", reason)
            .addField("Date", message.createdAt.toLocaleString());
        let botembed = new discord_js_1.MessageEmbed()
            .setColor("RED")
            .setThumbnail(member.user.displayAvatarURL({ size: size }))
            .addField("User:", member.user.username)
            .addField("Tag:", `${member.user.tag}`)
            .addField("NickName:", `${member.nickname}`)
            .addField("JoinedAt:", `${member.joinedAt.toLocaleString()}`)
            .addField("AccountCreated:", `${member.user.createdAt.toLocaleString()}`)
            .addField("Mod:", message.author)
            .addField("Reason:", reason)
            .setAuthor(`${message.guild.name} ModLogs`, message.guild.iconURL())
            .setFooter(`${message.guild.name} ModLogs`, message.guild.iconURL());
        message.channel.send(confirm).then(async (msg) => {
            msg.react('👍');
            msg.react('👎');
            const filter = (reaction, user) => {
                return ['👍', '👎'].includes(reaction.emoji.name) && user.id === message.author.id;
            };
            msg.awaitReactions(filter, { max: 1, time: 60000, errors: ['time'] })
                .then(collected => {
                const reaction = collected.first();
                if (reaction.emoji.name === '👍') {
                    channel.send(botembed);
                    message.author.send(thankyou);
                    message.delete();
                    msg.delete();
                    member.send(send).then(() => message.guild.members.ban(member, { reason: reason }).catch(err => console.log(err)));
                }
                if (reaction.emoji.name === '👎') {
                    message.delete();
                    msg.delete();
                }
            });
        });
    }
}
exports.default = ban;
//# sourceMappingURL=data:application/json;base64,