"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const discord_akairo_1 = require("discord-akairo");
const discord_js_1 = require("discord.js");
class report extends discord_akairo_1.Command {
    constructor() {
        super("report", {
            aliases: ["report", "r"],
            category: "Public",
            description: {
                content: "Reports a user",
                usage: "report",
                examples: [
                    "report @user reason"
                ]
            },
            ratelimit: 3,
            args: [
                {
                    id: "member",
                    type: "member",
                    prompt: {
                        start: (msg) => `${msg.author}, please provide a member to report...`,
                        retry: (msg) => `${msg.author}, please provide a valid member to report...`
                    }
                },
                {
                    id: "reason",
                    type: "string",
                    match: "rest",
                    default: "No reason provided"
                }
            ]
        });
    }
    async exec(message, { member, reason }) {
        const channel = message.member.guild.channels.cache.find(channel => channel.name === "logs");
        const reporter = message.author;
        let confirm = new discord_js_1.MessageEmbed()
            .setColor('YELLOW')
            .setTitle(`Confirm Report`)
            .setDescription(`${reporter} are you shure you want to report ${member} for ${reason}`);
        let thankyou = new discord_js_1.MessageEmbed()
            .setColor(`GREEN`)
            .setDescription(`Thanks for the report ${reporter} staff will look into it!`);
        let report = new discord_js_1.MessageEmbed()
            .setColor('RED')
            .setAuthor(`${message.guild.name} ModLogs`, message.guild.iconURL())
            .setFooter(`${message.guild.name} ModLogs`, message.guild.iconURL())
            .addField(`Moderation:`, 'Report')
            .addField(`Reporter:`, reporter)
            .addField(`Reported:`, member)
            .addField(`Reason:`, reason)
            .addField(`Date:`, message.createdAt.toLocaleString())
            .setThumbnail(message.guild.iconURL({ dynamic: true }));
        message.channel.send(confirm).then(async (msg) => {
            msg.react('üëç');
            msg.react('üëé');
            const filter = (reaction, user) => {
                return ['üëç', 'üëé'].includes(reaction.emoji.name) && user.id === message.author.id;
            };
            msg.awaitReactions(filter, { max: 1, time: 60000, errors: ['time'] })
                .then(collected => {
                const reaction = collected.first();
                if (reaction.emoji.name === 'üëç') {
                    channel.send(report);
                    message.author.send(thankyou);
                    message.delete();
                    msg.delete();
                }
                if (reaction.emoji.name === 'üëé') {
                    message.delete();
                    msg.delete();
                }
            });
        });
    }
}
exports.default = report;
//# sourceMappingURL=data:application/json;base64,